{"version":3,"sources":["constants.ts","service.ts","store/modules/contacts.ts","store/modules/ui.ts","Components/Animations/fadeIn.ts","Components/Card/CloseButton.tsx","Components/Card/Details.tsx","Components/Card/index.tsx","Components/Tabs/Tab.tsx","Components/Tabs/index.tsx","Components/ContactList/Name.tsx","Components/ContactList/index.tsx","App.tsx","store/store.ts","serviceWorker.ts","index.tsx"],"names":["configJson","title","userUrl","numberCards","tabs","appService","config","fetch","then","res","json","fetchContacts","createAsyncThunk","a","response","results","contactsReducer","createReducer","loading","list","error","builder","addCase","pending","state","fulfilled","action","payload","rejected","initialState","selectedTab","selectedContact","undefined","uiSlice","createSlice","name","reducers","setSelectedTab","setSelectedContact","actions","fadeIn","keyframes","Wrapper","styled","button","A","div","B","CloseButton","handleClose","onClick","React","memo","LeftColumn","RightColumn","Details","useSelector","ui","email","phone","location","street","number","city","postcode","FormattedName","Image","img","UserName","Close","Card","dispatch","useDispatch","first","last","formattedName","toUpperCase","useCallback","src","picture","medium","alt","login","username","props","selected","Letter","span","Count","Tab","letter","count","isSelected","handleClick","disabled","Tabs","groupedList","map","i","length","Span","Name","contact","SubWrapper","ContactList","Contianer","H1","h1","App","contacts","requestStatus","useMemo","groupBy","c","toLocaleLowerCase","useEffect","message","rootReducer","combineReducers","uiReducer","store","configureStore","reducer","devTools","process","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.3a3668a7.chunk.js","sourcesContent":["export const configJson = {\r\n  title: \"Contact List\",\r\n  userUrl: \"https://api.randomuser.me\",\r\n  numberCards: 120,\r\n  tabs: [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\r\n};\r\n\r\nexport type AppConfig = typeof configJson","//Service to contain any api calls\r\n\r\nimport { AppConfig } from \"./constants\";\r\nimport { APIResponse } from \"./store/types\";\r\n\r\nexport const appService = {\r\n  fetchContacts: (config: AppConfig): Promise<APIResponse> => {\r\n    return fetch(\r\n      `${config.userUrl}/?results=${config.numberCards}`\r\n    ).then((res) => res.json());\r\n  },\r\n};\r\n","import {\r\n  createAsyncThunk,\r\n  createReducer,\r\n  SerializedError,\r\n} from \"@reduxjs/toolkit\";\r\nimport { AppConfig } from \"../../constants\";\r\nimport { appService } from \"../../service\";\r\nimport { Contact } from \"../types\";\r\n\r\ninterface ContactsState {\r\n  loading: \"idle\" | \"pending\" | \"fulfilled\" | \"rejected\";\r\n  list: Contact[];\r\n  error: SerializedError | null;\r\n}\r\n\r\nconst initialState: ContactsState = {\r\n  loading: \"idle\",\r\n  list: [],\r\n  error: null,\r\n};\r\n\r\nexport const fetchContacts = createAsyncThunk(\r\n  \"contacts/fetchData\",\r\n  async (config: AppConfig) => {\r\n    const response = await appService.fetchContacts(config);\r\n    return response.results;\r\n  }\r\n);\r\n\r\nconst contactsReducer = createReducer(initialState, (builder) => {\r\n  builder\r\n    .addCase(fetchContacts.pending, (state) => {\r\n      state.loading = \"pending\";\r\n    })\r\n    .addCase(fetchContacts.fulfilled, (state, action) => {\r\n      state.list = action.payload;\r\n      state.loading = \"fulfilled\";\r\n    })\r\n    .addCase(fetchContacts.rejected, (state, action) => {\r\n      state.loading = \"rejected\";\r\n      state.error = action.error;\r\n    });\r\n});\r\n\r\nexport default contactsReducer;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { Contact } from \"../types\";\r\n\r\ninterface UIState {\r\n  selectedTab: string;\r\n  selectedContact: Contact | undefined;\r\n}\r\n\r\nconst initialState: UIState = {\r\n  selectedTab: \"a\",\r\n  selectedContact: undefined,\r\n};\r\n\r\nexport const uiSlice = createSlice({\r\n  name: \"ui\",\r\n  initialState,\r\n  reducers: {\r\n    setSelectedTab: (state, action: PayloadAction<UIState[\"selectedTab\"]>) => {\r\n      state.selectedTab = action.payload;\r\n    },\r\n    setSelectedContact: (\r\n      state,\r\n      action: PayloadAction<UIState[\"selectedContact\"]>\r\n    ) => {\r\n      state.selectedContact = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setSelectedTab, setSelectedContact } = uiSlice.actions;\r\n\r\nexport default uiSlice.reducer;\r\n","import { keyframes } from \"styled-components\";\r\n\r\nexport const fadeIn = keyframes`\r\n  0% {\r\n        display: flex;\r\n        opacity: 0;\r\n    }\r\n  100% {\r\n        display: flex;\r\n        opacity: 1;\r\n    }\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Wrapper = styled.button`\r\n  height: 20px;\r\n  width: 20px;\r\n  background-color: transparent;\r\n`;\r\n\r\nconst A = styled.div`\r\n  height: 20px;\r\n  width: 2px;\r\n  margin-left: 8px;\r\n  margin-top: -1px;\r\n  background-color: gray;\r\n  transform: rotate(45deg);\r\n  z-index: 1;\r\n`;\r\n\r\nconst B = styled.div`\r\n  height: 20px;\r\n  width: 2px;\r\n  background-color: gray;\r\n  transform: rotate(90deg);\r\n  z-index: 2;\r\n`;\r\n\r\ninterface Props {\r\n  handleClose: () => void;\r\n}\r\n\r\nconst CloseButton: React.FC<Props> = ({ handleClose }) => {\r\n  return (\r\n    <Wrapper onClick={handleClose}>\r\n      <A>\r\n        <B></B>\r\n      </A>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default React.memo(CloseButton);\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { RootState } from \"../../store/store\";\r\nimport { Contact } from \"../../store/types\";\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  font-size: 1rem;\r\n`;\r\n\r\nconst LeftColumn = styled.div`\r\n  display: inline-block;\r\n  margin-right: 15px;\r\n  font-size: inherit;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst RightColumn = styled.div`\r\n  display: inline-block;\r\n  font-size: inherit;\r\n`;\r\n\r\nconst Details: React.FC = () => {\r\n  const selectedContact = useSelector(\r\n    (state: RootState) => state.ui.selectedContact\r\n  ) as Contact;\r\n\r\n  return (\r\n    <Wrapper>\r\n      <LeftColumn>\r\n        <div>e-mail</div>\r\n        <div>phone</div>\r\n        <div>street</div>\r\n        <div>city</div>\r\n        <div>state</div>\r\n        <div>postcode</div>\r\n      </LeftColumn>\r\n      <RightColumn>\r\n        <div>{selectedContact.email}</div>\r\n        <div>{selectedContact.phone}</div>\r\n        <div>{`${selectedContact.location.street.number} ${selectedContact.location.street.name}`}</div>\r\n        <div>{selectedContact.location.city}</div>\r\n        <div>{selectedContact.location.state}</div>\r\n        <div>{selectedContact.location.postcode}</div>\r\n      </RightColumn>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default React.memo(Details);\r\n","import React, { useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { setSelectedContact } from \"../../store/modules/ui\";\r\nimport { RootState } from \"../../store/store\";\r\nimport { Contact } from \"../../store/types\";\r\nimport { fadeIn } from \"../Animations/fadeIn\";\r\nimport CloseButton from \"./CloseButton\";\r\nimport Details from \"./Details\";\r\n\r\nconst Wrapper = styled.div`\r\n  align-items: flex-start;\r\n  width: 38%;\r\n  position: absolute;\r\n  right: 8%;\r\n  top: 32%;\r\n  border: var(--borders);\r\n  border-radius: 4px;\r\n  padding: 15px 85px 15px 20px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  animation: ${fadeIn} 0.2s;\r\n  background: linear-gradient(\r\n      to bottom,\r\n      black -15%,\r\n      transparent 7%,\r\n      transparent 93%,\r\n      black 115%\r\n    ),\r\n    var(--light-gray);\r\n\r\n  @media (max-width: 1244px) {\r\n    flex-direction: column;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    width: 88%;\r\n    right: 6%;\r\n  }\r\n`;\r\n\r\nconst FormattedName = styled.div`\r\n  color: gray;\r\n  font-size: 1.5rem;\r\n  padding-bottom: 10px;\r\n`;\r\n\r\nconst Image = styled.img`\r\n  border-radius: 50%;\r\n  margin-left: -10px;\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst UserName = styled.div`\r\n  writing-mode: vertical-lr;\r\n  position: absolute;\r\n  top: 31%;\r\n  right: 10%;\r\n  padding: 8px 3px;\r\n  color: white;\r\n  font-weight: 600;\r\n  font-size: 0.8rem;\r\n  background-color: red;\r\n  background-image: linear-gradient(\r\n    137deg,\r\n    transparent -135%,\r\n    black -78%,\r\n    transparent 103%\r\n  );\r\n`;\r\n\r\nconst Close = styled.div`\r\n  position: relative;\r\n  left: -10px;\r\n`;\r\n\r\nconst Card: React.FC = () => {\r\n  const selectedContact = useSelector(\r\n    (state: RootState) => state.ui.selectedContact\r\n  ) as Contact;\r\n\r\n  const dispatch = useDispatch();\r\n  const { first, last } = selectedContact!.name;\r\n  const formattedName = `${first.toUpperCase()}, ${last}`;\r\n  const handleClose = useCallback(\r\n    () => dispatch(setSelectedContact(undefined)),\r\n    [dispatch]\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {/* The key prop passed to SubWrapper is used to force restart animation on tab change */}\r\n      <Wrapper key={selectedContact.login.username}>\r\n        <Close>\r\n          <CloseButton handleClose={handleClose} />\r\n        </Close>\r\n        <Image\r\n          src={selectedContact.picture.medium}\r\n          alt={selectedContact.name.first}\r\n        />\r\n        <div>\r\n          <FormattedName>{formattedName}</FormattedName>\r\n          <Details />\r\n        </div>\r\n      </Wrapper>\r\n      <UserName>{`USERNAME ${selectedContact.login.username}`}</UserName>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Card);\r\n","import React, { useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { setSelectedContact, setSelectedTab } from \"../../store/modules/ui\";\r\nimport { RootState } from \"../../store/store\";\r\n\r\nconst Wrapper = styled.button`\r\n  /* common styles for all tabs */\r\n  border-radius: 10px 10px 0 0;\r\n  border: var(--borders);\r\n  padding: 3px;\r\n  height: 100%;\r\n  background-color: var(--light-gray);\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  flex: 1 1 14px;\r\n  color: var(--dark-gray);\r\n\r\n  /* disabled styles */\r\n  :disabled {\r\n    color: var(--lighter-gray);\r\n    cursor: not-allowed;\r\n  }\r\n\r\n  /* Styles that depend on whether the tab is selected or not */\r\n  border-bottom: ${(props: { selected: boolean }) =>\r\n    props.selected ? \"none\" : \"var(--borders)\"};\r\n  background-image: ${({ selected }) =>\r\n    selected\r\n      ? \"linear-gradient(to bottom,#969696 -1%,var(--light-gray) 27%)\"\r\n      : \"none\"};\r\n`;\r\n\r\nconst Letter = styled.span`\r\n  font-weight: bold;\r\n  font-size: 1.5rem;\r\n`;\r\n\r\nconst Count = styled.span`\r\n  font-size: 0.6rem;\r\n  font-weight: 700;\r\n  align-self: flex-end;\r\n`;\r\n\r\ninterface Props {\r\n  letter: string;\r\n  count: number;\r\n}\r\n\r\nconst Tab: React.FC<Props> = ({ letter, count }) => {\r\n  const selectedTab = useSelector((state: RootState) => state.ui.selectedTab);\r\n  const isSelected = letter === selectedTab;\r\n  const dispatch = useDispatch();\r\n\r\n  const handleClick = useCallback(() => {\r\n    if (letter !== selectedTab && count > 0) {\r\n      dispatch(setSelectedTab(letter));\r\n      dispatch(setSelectedContact(undefined));\r\n    }\r\n  }, [count, dispatch, letter, selectedTab]);\r\n\r\n  return (\r\n    <Wrapper disabled={count === 0} selected={isSelected} onClick={handleClick}>\r\n      <Letter>{letter}</Letter>\r\n      <Count>{count}</Count>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default React.memo(Tab);\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Tab from \"./Tab\";\r\nimport { configJson } from \"../../constants\";\r\nimport { Dictionary } from \"lodash/\";\r\nimport { Contact } from \"../../store/types\";\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  margin-bottom: -1px;\r\n`;\r\n\r\ninterface Props {\r\n  groupedList: Dictionary<Contact[]>;\r\n}\r\n\r\nconst Tabs: React.FC<Props> = ({ groupedList }) => {\r\n  return (\r\n    <Wrapper>\r\n      {configJson.tabs.map((letter, i) => (\r\n        <Tab key={i} letter={letter} count={groupedList[letter]?.length || 0} />\r\n      ))}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Tabs;\r\n","import React, { useCallback } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { setSelectedContact } from \"../../store/modules/ui\";\r\nimport { Contact } from \"../../store/types\";\r\n\r\nconst Wrapper = styled.button`\r\n  border-bottom: 2px dotted var(--lighter-gray);\r\n  padding: 0px 0 12px 12px;\r\n  margin: 8px 0 7px 10px;\r\n  background-color: inherit;\r\n  text-align: left;\r\n`;\r\n\r\nconst Span = styled.span`\r\n  color: var(--dark-gray);\r\n  font-weight: 600;\r\n  font-size: 1rem;\r\n`;\r\n\r\ninterface Props {\r\n  contact: Contact;\r\n}\r\n\r\nconst Name: React.FC<Props> = ({ contact }) => {\r\n  const { first, last } = contact.name;\r\n  const dispatch = useDispatch();\r\n  const formattedName = `${last}, ${first.toUpperCase()}`;\r\n  const handleClick = useCallback(() => dispatch(setSelectedContact(contact)), [\r\n    contact,\r\n    dispatch,\r\n  ]);\r\n\r\n  return (\r\n    <Wrapper onClick={handleClick}>\r\n      <Span >{formattedName}</Span>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default React.memo(Name);\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { RootState } from \"../../store/store\";\r\nimport { Dictionary } from \"lodash/\";\r\nimport Name from \"./Name\";\r\nimport { Contact } from \"../../store/types\";\r\nimport { fadeIn } from \"../Animations/fadeIn\";\r\n\r\nconst Wrapper = styled.div`\r\n  border-right: var(--borders);\r\n  border-left: var(--borders);\r\n  border-bottom: var(--borders);\r\n  background-color: var(--light-gray);\r\n  border-radius: 0 0 5px 5px;\r\n  height: 100%;\r\n  padding: 1.2rem;\r\n`;\r\n\r\nconst SubWrapper = styled.div`\r\n  animation: ${fadeIn} 0.3s;\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-wrap: wrap;\r\n  height: 100%;\r\n`;\r\n\r\ninterface Props {\r\n  groupedList: Dictionary<Contact[]>;\r\n}\r\n\r\nconst ContactList: React.FC<Props> = ({ groupedList }) => {\r\n  const selectedTab = useSelector((state: RootState) => state.ui.selectedTab);\r\n\r\n  return (\r\n    <Wrapper>\r\n      {/* The key prop passed to SubWrapper is used to force restart animation on tab change */}\r\n      <SubWrapper key={selectedTab}>\r\n        {selectedTab &&\r\n          groupedList[selectedTab]?.map((contact, i) => (\r\n            <Name contact={contact} key={i} />\r\n          ))}\r\n      </SubWrapper>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default React.memo(ContactList);\r\n","import React, { useEffect, useMemo } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { configJson } from \"./constants\";\r\nimport { fetchContacts } from \"./store/modules/contacts\";\r\nimport { RootState } from \"./store/store\";\r\nimport { groupBy } from \"lodash/\";\r\nimport Card from \"./Components/Card\";\r\nimport Tabs from \"./Components/Tabs\";\r\nimport ContactList from \"./Components/ContactList\";\r\n\r\nconst Contianer = styled.div`\r\n  display: flex;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  background-color: transparent;\r\n  height: 85%;\r\n  width: 90%;\r\n  @media (max-width: 768px) {\r\n    width: 98%;\r\n  }\r\n  @media (max-height: 640px) {\r\n    height: 82%;\r\n  }\r\n`;\r\n\r\nconst H1 = styled.h1`\r\n  margin: 5px;\r\n`;\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const list = useSelector((state: RootState) => state.contacts.list);\r\n  const requestStatus = useSelector(\r\n    (state: RootState) => state.contacts.loading\r\n  );\r\n  const error = useSelector((state: RootState) => state.contacts.error);\r\n\r\n  const selectedContact = useSelector(\r\n    (state: RootState) => state.ui.selectedContact\r\n  );\r\n\r\n  const groupedList = useMemo(\r\n    () => groupBy(list, (c) => c.name.first[0].toLocaleLowerCase()),\r\n    [list]\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchContacts(configJson));\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <Contianer>\r\n      <H1>Contact List</H1>\r\n      {requestStatus === \"pending\" && <h3>Loading...</h3>}\r\n      {error && <h3>{error.message}</h3>}\r\n      {selectedContact && <Card />}\r\n      {requestStatus === \"fulfilled\" && (\r\n        <Wrapper>\r\n          <Tabs groupedList={groupedList} />\r\n          <ContactList groupedList={groupedList} />\r\n        </Wrapper>\r\n      )}\r\n    </Contianer>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import {\r\n  configureStore,\r\n  ThunkAction,\r\n  Action,\r\n  combineReducers,\r\n} from \"@reduxjs/toolkit\";\r\nimport contactsReducer from \"./modules/contacts\";\r\nimport uiReducer from \"./modules/ui\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  contacts: contactsReducer,\r\n  ui: uiReducer,\r\n});\r\n\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './store/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}